package crldiagramdomain

import (
	. "github.com/onsi/ginkgo/v2/dsl/core"
	. "github.com/onsi/gomega"
	"github.com/pbrown12303/activeCRL/core"
	"golang.org/x/image/math/fixed"
)

var _ = Describe("CrlDiagramtest", func() {
	var uOfD *core.UniverseOfDiscourse
	var trans *core.Transaction

	BeforeEach(func() {
		uOfD = core.NewUniverseOfDiscourse()
		trans = uOfD.NewTransaction()
		builtCrlDiagramDomain := BuildCrlDiagramDomain(uOfD, trans)
		Expect(builtCrlDiagramDomain).ToNot(BeNil())
		Expect(builtCrlDiagramDomain.GetURI(trans)).To(Equal(CrlDiagramDomainURI))
		Expect(uOfD.GetElementWithURI(CrlDiagramDomainURI)).To(Equal(builtCrlDiagramDomain))
	})

	AfterEach(func() {
		trans.ReleaseLocks()
	})

	Describe("TestBuildCrlDiagramDomain", func() {
		Specify("CrlDiagram should build correctly", func() {
			builtCrlDiagramDomain := uOfD.GetElementWithURI(CrlDiagramDomainURI)
			definingDiagram := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramURI, trans)
			crlDiagramWidth := definingDiagram.GetFirstOwnedLiteralWithURI(CrlDiagramWidthURI, trans)
			Expect(crlDiagramWidth).ToNot(BeNil())
			crlDiagramHeight := definingDiagram.GetFirstOwnedLiteralWithURI(CrlDiagramHeightURI, trans)
			Expect(crlDiagramHeight).ToNot(BeNil())
		})

		Specify("CrlDiagramElement should build correctly", func() {
			builtCrlDiagramDomain := uOfD.GetElementWithURI(CrlDiagramDomainURI)
			definingDiagramElement := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramElementURI, trans)
			crlDiagramElementModelReference := definingDiagramElement.GetFirstOwnedReferenceWithURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramElementAbstractionDisplayLabel := definingDiagramElement.GetFirstOwnedLiteralWithURI(CrlDiagramElementAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramElementAbstractionDisplayLabel).ToNot(BeNil())
			crlDiagramElementDisplayLabel := definingDiagramElement.GetFirstOwnedLiteralWithURI(CrlDiagramElementDisplayLabelURI, trans)
			Expect(crlDiagramElementDisplayLabel).ToNot(BeNil())
		})

		Specify("CrlDiagramNode should build correctly", func() {
			builtCrlDiagramDomain := uOfD.GetElementWithURI(CrlDiagramDomainURI)
			definingDiagramNode := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramNodeURI, trans)
			crlDiagramNodeX := definingDiagramNode.GetFirstOwnedLiteralWithURI(CrlDiagramNodeXURI, trans)
			Expect(crlDiagramNodeX).ToNot(BeNil())
			crlDiagramNodeY := definingDiagramNode.GetFirstOwnedLiteralWithURI(CrlDiagramNodeYURI, trans)
			Expect(crlDiagramNodeY).ToNot(BeNil())
			crlDiagramNodeHeight := definingDiagramNode.GetFirstOwnedLiteralWithURI(CrlDiagramNodeHeightURI, trans)
			Expect(crlDiagramNodeHeight).ToNot(BeNil())
			crlDiagramNodeWidth := definingDiagramNode.GetFirstOwnedLiteralWithURI(CrlDiagramNodeWidthURI, trans)
			Expect(crlDiagramNodeWidth).ToNot(BeNil())
		})

		Specify("CrlDiagramLink should build correctly", func() {
			builtCrlDiagramDomain := uOfD.GetElementWithURI(CrlDiagramDomainURI)
			crlDiagramLink := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramLinkURI, trans)
			Expect(crlDiagramLink).ToNot(BeNil())
			crlDiagramLinkSourceReference := crlDiagramLink.GetFirstOwnedReferenceWithURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := crlDiagramLink.GetFirstOwnedReferenceWithURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
		})

		Specify("CrlDiagramPointer and refinements should build correctly", func() {
			builtCrlDiagramDomain := uOfD.GetElementWithURI(CrlDiagramDomainURI)
			crlPointer := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramPointerURI, trans)
			Expect(crlPointer).ToNot(BeNil())
			crlOwnerPointer := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramOwnerPointerURI, trans)
			Expect(crlOwnerPointer).ToNot(BeNil())
			Expect(crlOwnerPointer.IsRefinementOf(crlPointer, trans)).To(BeTrue())
			crlAbstractPointer := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramAbstractPointerURI, trans)
			Expect(crlAbstractPointer).ToNot(BeNil())
			Expect(crlAbstractPointer.IsRefinementOf(crlPointer, trans)).To(BeTrue())
			crlRefinedPointer := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramRefinedPointerURI, trans)
			Expect(crlRefinedPointer).ToNot(BeNil())
			Expect(crlRefinedPointer.IsRefinementOf(crlPointer, trans)).To(BeTrue())
			crlElementPointer := builtCrlDiagramDomain.GetFirstOwnedConceptWithURI(CrlDiagramElementPointerURI, trans)
			Expect(crlElementPointer).ToNot(BeNil())
			Expect(crlElementPointer.IsRefinementOf(crlPointer, trans)).To(BeTrue())
		})
	})
	Describe("Test convenience functions", func() {
		Specify("GetReferencedElement and SetReferencedElement should work", func() {
			node, _ := NewDiagramNode(trans)
			target, _ := uOfD.NewElement(trans)
			node.AsDiagramElement().SetReferencedModelConcept(target, trans)
			Expect(node.AsDiagramElement().GetReferencedModelConcept(trans)).To(Equal(target))
			Expect(node.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)).ToNot(BeNil())
			Expect(node.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans).GetReferencedConcept(trans)).To(Equal(target))
		})
		Specify("SetReferencedElement should gracefully handle a nil argument", func() {
			node, _ := NewDiagramNode(trans)
			node.AsDiagramElement().SetReferencedModelConcept(nil, trans)
		})
		Specify("Test GetAbstractionDisplayLabel and SetAbstractionDisplayLabel", func() {
			node, _ := NewDiagramNode(trans)
			displayLabel := "displayLabel"
			node.AsDiagramElement().SetAbstractionDisplayLabel(displayLabel, trans)
			Expect(node.AsDiagramElement().GetAbstractionDisplayLabel(trans)).To(Equal(displayLabel))
		})
		Specify("Test GetDisplayLabel and SetDisplayLabel", func() {
			node, _ := NewDiagramNode(trans)
			displayLabel := "displayLabel"
			node.AsDiagramElement().SetDisplayLabel(displayLabel, trans)
			Expect(node.AsDiagramElement().GetDisplayLabel(trans)).To(Equal(displayLabel))
		})
		Specify("Test GetNodeHeight and SetNodeHeight", func() {
			node, _ := NewDiagramNode(trans)
			value := 123.45
			node.SetNodeHeight(value, trans)
			Expect(node.GetNodeHeight(trans)).To(Equal(value))
		})
		Specify("Test GetNodeWidth and SetNodeWidth", func() {
			node, _ := NewDiagramNode(trans)
			value := 123.45
			node.SetNodeWidth(value, trans)
			Expect(node.GetNodeWidth(trans)).To(Equal(value))
		})
		Specify("Test GetNodeX and SetNodeX", func() {
			node, _ := NewDiagramNode(trans)
			value := 123.45
			node.SetNodeX(value, trans)
			Expect(node.GetNodeX(trans)).To(Equal(value))
		})
		Specify("Test GetNodeY and SetNodeY", func() {
			node, _ := NewDiagramNode(trans)
			value := 123.45
			node.SetNodeY(value, trans)
			Expect(node.GetNodeY(trans)).To(Equal(value))
		})
		Specify("GetLinkSource and SetLinkSource should work", func() {
			link, _ := NewDiagramReferenceLink(trans)
			target, _ := NewDiagramNode(trans)
			link.SetLinkSource(target.AsDiagramElement(), trans)
			Expect(link.GetLinkSource(trans)).To(Equal(target.AsDiagramElement()))
			Expect(link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)).ToNot(BeNil())
			Expect(link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans).GetReferencedConcept(trans)).To(Equal(target.AsCore()))
		})
		Specify("GetLinkTarget and SetLinkTarget should work", func() {
			link, _ := NewDiagramReferenceLink(trans)
			target, _ := NewDiagramNode(trans)
			link.SetLinkTarget(target.AsDiagramElement(), trans)
			Expect(link.GetLinkTarget(trans)).To(Equal(target.AsDiagramElement()))
			Expect(link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkTargetURI, trans)).ToNot(BeNil())
			Expect(link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkTargetURI, trans).GetReferencedConcept(trans)).To(Equal(target.AsCore()))
		})
	})
	Describe("Test Fixed-to-Float conversions", func() {
		Specify("Zero should equal zero", func() {
			fixedX := fixed.I(0)
			floatX := Int26_6ToFloat(fixedX)
			Expect(floatX).To(Equal(0.0))
		})
		Specify("One should equal one", func() {
			fixedX := fixed.I(1)
			floatX := Int26_6ToFloat(fixedX)
			Expect(floatX).To(Equal(1.0))
		})
		Specify("Minus One should equal minus one", func() {
			fixedX := fixed.I(-1)
			floatX := Int26_6ToFloat(fixedX)
			Expect(floatX).To(Equal(-1.0))
		})
		Specify("0.5 should equal 0.5", func() {
			var fixedX fixed.Int26_6 = 1 << 5
			floatX := Int26_6ToFloat(fixedX)
			Expect(floatX).To(Equal(0.5))
		})
	})

	Describe("Test New... functions", func() {
		BeforeEach(func() {
			BuildCrlDiagramDomain(uOfD, trans)
		})
		Specify("Createing a new diagram should work", func() {
			newDiagram, err := NewDiagram(trans)
			Expect(err).To(BeNil())
			Expect(newDiagram).ToNot(BeNil())
			Expect(newDiagram.AsCore().IsRefinementOfURI(CrlDiagramURI, trans)).To(BeTrue())
			crlDiagramWidth := newDiagram.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramWidthURI, trans)
			Expect(crlDiagramWidth).ToNot(BeNil())
			crlDiagramHeight := newDiagram.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramHeightURI, trans)
			Expect(crlDiagramHeight).ToNot(BeNil())

		})
		Specify("Creating a new node shoud work", func() {
			newDiagramNode, err := NewDiagramNode(trans)
			Expect(err).To(BeNil())
			Expect(newDiagramNode).ToNot(BeNil())
			Expect(newDiagramNode.AsCore().IsRefinementOfURI(CrlDiagramNodeURI, trans)).To(BeTrue())
			Expect(newDiagramNode.AsCore().IsRefinementOfURI(CrlDiagramNodeURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := newDiagramNode.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramElementAbstractionDisplayLabel := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramElementAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramElementAbstractionDisplayLabel).ToNot(BeNil())
			crlDiagramElementDisplayLabel := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramElementDisplayLabelURI, trans)
			Expect(crlDiagramElementDisplayLabel).ToNot(BeNil())
			crlDiagramNodeX := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramNodeXURI, trans)
			Expect(crlDiagramNodeX).ToNot(BeNil())
			crlDiagramNodeY := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramNodeYURI, trans)
			Expect(crlDiagramNodeY).ToNot(BeNil())
			crlDiagramNodeHeight := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramNodeHeightURI, trans)
			Expect(crlDiagramNodeHeight).ToNot(BeNil())
			crlDiagramNodeWidth := newDiagramNode.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramNodeWidthURI, trans)
			Expect(crlDiagramNodeWidth).ToNot(BeNil())
		})
		Specify("Creating a new reference link shoud work", func() {
			link, err := NewDiagramReferenceLink(trans)
			Expect(err).To(BeNil())
			Expect(link).ToNot(BeNil())
			Expect(link.AsCore().IsRefinementOfURI(CrlDiagramReferenceLinkURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := link.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := link.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			crlDiagramLinkSourceReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
			multiplicity := link.AsCore().GetFirstOwnedConceptRefinedFromURI(CrlDiagramLinkMultiplicityURI, trans)
			Expect(multiplicity).ToNot(BeNil())
			ValidateAnchoredText(multiplicity, trans)
		})
		Specify("Creating a new refinement link shoud work", func() {
			link, err := NewDiagramRefinementLink(trans)
			Expect(err).To(BeNil())
			Expect(link).ToNot(BeNil())
			Expect(link.AsCore().IsRefinementOfURI(CrlDiagramRefinementLinkURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := link.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := link.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			Expect(link.AsCore().IsRefinementOfURI(CrlDiagramRefinementLinkURI, trans)).To(BeTrue())
			crlDiagramLinkSourceReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := link.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
		})
		Specify("Creating a new ownerPointer shoud work", func() {
			ownerPointer, err := NewDiagramOwnerPointer(trans)
			Expect(err).To(BeNil())
			Expect(ownerPointer).ToNot(BeNil())
			Expect(ownerPointer.AsCore().IsRefinementOfURI(CrlDiagramOwnerPointerURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := ownerPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := ownerPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := ownerPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			crlDiagramLinkSourceReference := ownerPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := ownerPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
			multiplicity := ownerPointer.AsCore().GetFirstOwnedConceptRefinedFromURI(CrlDiagramLinkMultiplicityURI, trans)
			Expect(multiplicity).ToNot(BeNil())
			ValidateAnchoredText(multiplicity, trans)
		})
		Specify("Creating a new elementPointer shoud work", func() {
			elementPointer, err := NewDiagramElementPointer(trans)
			Expect(err).To(BeNil())
			Expect(elementPointer).ToNot(BeNil())
			Expect(elementPointer.AsCore().IsRefinementOfURI(CrlDiagramElementPointerURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := elementPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := elementPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := elementPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			crlDiagramLinkSourceReference := elementPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := elementPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
		})
		Specify("Creating a new abstractPointer shoud work", func() {
			abstractPointer, err := NewDiagramAbstractPointer(trans)
			Expect(err).To(BeNil())
			Expect(abstractPointer).ToNot(BeNil())
			Expect(abstractPointer.AsCore().IsRefinementOfURI(CrlDiagramAbstractPointerURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := abstractPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := abstractPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := abstractPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			crlDiagramLinkSourceReference := abstractPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := abstractPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
		})
		Specify("Creating a new refinedPointer shoud work", func() {
			refinedPointer, err := NewDiagramRefinedPointer(trans)
			Expect(err).To(BeNil())
			Expect(refinedPointer).ToNot(BeNil())
			Expect(refinedPointer.AsCore().IsRefinementOfURI(CrlDiagramRefinedPointerURI, trans)).To(BeTrue())
			crlDiagramElementModelReference := refinedPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramElementModelReferenceURI, trans)
			Expect(crlDiagramElementModelReference).ToNot(BeNil())
			crlDiagramLinkAbstractionDisplayLabel := refinedPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkAbstractionDisplayLabelURI, trans)
			Expect(crlDiagramLinkAbstractionDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkAbstractionDisplayLabel, trans)
			crlDiagramLinkDisplayLabel := refinedPointer.AsCore().GetFirstOwnedLiteralRefinedFromURI(CrlDiagramLinkDisplayLabelURI, trans)
			Expect(crlDiagramLinkDisplayLabel).ToNot(BeNil())
			ValidateAnchoredText(crlDiagramLinkDisplayLabel, trans)
			crlDiagramLinkSourceReference := refinedPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkSourceReference).ToNot(BeNil())
			crlDiagramLinkTargetReference := refinedPointer.AsCore().GetFirstOwnedReferenceRefinedFromURI(CrlDiagramLinkSourceURI, trans)
			Expect(crlDiagramLinkTargetReference).ToNot(BeNil())
		})
	})
})

func ValidateAnchoredText(anchoredText *core.Concept, trans *core.Transaction) {
	anchorX := anchoredText.GetFirstOwnedConceptRefinedFromURI(CrlDiagramAnchoredTextAnchorXURI, trans)
	Expect(anchorX).ToNot(BeNil())
	anchorY := anchoredText.GetFirstOwnedConceptRefinedFromURI(CrlDiagramAnchoredTextAnchorYURI, trans)
	Expect(anchorY).ToNot(BeNil())
	offsetX := anchoredText.GetFirstOwnedConceptRefinedFromURI(CrlDiagramAnchoredTextOffsetXURI, trans)
	Expect(offsetX).ToNot(BeNil())
	offsetY := anchoredText.GetFirstOwnedConceptRefinedFromURI(CrlDiagramAnchoredTextOffsetYURI, trans)
	Expect(offsetY).ToNot(BeNil())
	visible := anchoredText.GetFirstOwnedConceptRefinedFromURI(CrlDiagramAnchoredTextVisibleURI, trans)
	Expect(visible).ToNot(BeNil())
}
