package crldatastructuresdomain

import (
	. "github.com/onsi/ginkgo/v2/dsl/core"
	. "github.com/onsi/gomega"
	"github.com/pbrown12303/activeCRL/core"
)

var _ = Describe("List test", func() {
	var uOfD *core.UniverseOfDiscourse
	var trans *core.Transaction

	BeforeEach(func() {
		uOfD = core.NewUniverseOfDiscourse()
		trans = uOfD.NewTransaction()
		BuildCrlDataStructuresDomain(uOfD, trans)
	})

	AfterEach(func() {
		trans.ReleaseLocks()
	})

	Describe("List should be created correctly", func() {
		Specify("Creation should fail with no specified type", func() {
			_, err := NewList(uOfD, nil, trans)
			Expect(err).Should(HaveOccurred())
		})
		Specify("Normal creation with Reference type", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, err := NewList(uOfD, coreReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			typeReference := newList.GetFirstOwnedReferenceRefinedFromURI(CrlListTypeReferenceURI, trans)
			Expect(typeReference).ToNot(BeNil())
			Expect(typeReference.GetReferencedConceptID(trans)).To(Equal(coreReference.GetConceptID(trans)))
			Expect(GetFirstMemberReference(newList, trans)).To(BeNil())
			Expect(GetLastMemberReference(newList, trans)).To(BeNil())
		})
	})
	Describe("AddListMemberAfter should work correctly", func() {
		Specify("Add after existing solo member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			// Add referenceA
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, err0 := AppendListMember(newList, referenceA, trans)
			Expect(err0).ShouldNot(HaveOccurred())
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			// Add newReference
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AddListMemberAfter(newList, memberReferenceA, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			// Check first member reference
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check last member reference
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check priorMemberReference of newMemberReference
			priorMemberReference, err3 := GetPriorMemberReference(newMemberReference, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).ToNot(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check nextMemberReference of memberReferenceA
			nextMemberReference, err4 := GetNextMemberReference(memberReferenceA, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
		})
		Specify("Add after existing first member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AppendListMember(newList, referenceB, trans)
			newReference, _ := uOfD.NewReference(trans)
			// Validate references between A and B
			nmr, _ := GetNextMemberReference(memberReferenceA, trans)
			pmr, _ := GetPriorMemberReference(memberReferenceB, trans)
			Expect(nmr.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
			Expect(pmr.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Add new member
			newMemberReference, err := AddListMemberAfter(newList, memberReferenceA, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			// Check first member next reference
			nextMemberReferenceA, err6 := GetNextMemberReference(memberReferenceA, trans)
			Expect(err6).To(BeNil())
			Expect(nextMemberReferenceA.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check new member prior reference
			priorMemberReference, err7 := GetPriorMemberReference(newMemberReference, trans)
			Expect(err7).To(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check last member's prior refererence
			priorMemberReferenceB, err3 := GetPriorMemberReference(memberReferenceB, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReferenceB).ToNot(BeNil())
			Expect(priorMemberReferenceB.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check new member next reference
			nextMemberReference, err4 := GetNextMemberReference(newMemberReference, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
			// Check first list member
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check last list member
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
		})
	})
	Describe("AddListMemberBefore should work correctly", func() {
		Specify("Add before existing solo member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AddListMemberBefore(newList, memberReferenceA, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			priorMemberReference, err3 := GetPriorMemberReference(memberReferenceA, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).ToNot(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			nextMemberReference, err4 := GetNextMemberReference(newMemberReference, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
		})
		Specify("Add before existing second member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AddListMemberBefore(newList, memberReferenceA, referenceB, trans)
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AddListMemberBefore(newList, memberReferenceA, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			priorMemberReference, err3 := GetPriorMemberReference(memberReferenceA, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).ToNot(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			nextMemberReference, err4 := GetNextMemberReference(newMemberReference, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			nextMemberReferenceB, err6 := GetNextMemberReference(memberReferenceB, trans)
			Expect(err6).To(BeNil())
			Expect(nextMemberReferenceB.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			priorMemberReferenceA, err7 := GetPriorMemberReference(memberReferenceA, trans)
			Expect(err7).To(BeNil())
			Expect(priorMemberReferenceA.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
		})
	})
	Describe("AppendListMember should work correctly", func() {
		Specify("Append with empty set should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AppendListMember(newList, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			Expect(newMemberReference.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			// Check first member reference
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check last member reference
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
		})
		Specify("Append with existing solo member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			// Add referenceA
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			// Add newReference
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AppendListMember(newList, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			// Check first member reference
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check last member reference
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check priorMemberReference of newMemberReference
			priorMemberReference, err3 := GetPriorMemberReference(newMemberReference, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).ToNot(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check nextMemberReference of memberReferenceA
			nextMemberReference, err4 := GetNextMemberReference(memberReferenceA, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
		})
	})
	Describe("ClearList should work correctrly", func() {
		Specify("Clear with empty set should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			ClearList(newList, trans)
			typeReference := newList.GetFirstOwnedReferenceRefinedFromURI(CrlListTypeReferenceURI, trans)
			Expect(typeReference).ToNot(BeNil())
			Expect(typeReference.GetReferencedConceptID(trans)).To(Equal(coreReference.GetConceptID(trans)))
			Expect(GetFirstMemberReference(newList, trans)).To(BeNil())
			Expect(GetLastMemberReference(newList, trans)).To(BeNil())
		})
		Specify("Clear with single set member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, _ := AppendListMember(newList, newReference, trans)
			ClearList(newList, trans)
			typeReference := newList.GetFirstOwnedReferenceRefinedFromURI(CrlListTypeReferenceURI, trans)
			Expect(typeReference).ToNot(BeNil())
			Expect(typeReference.GetReferencedConceptID(trans)).To(Equal(coreReference.GetConceptID(trans)))
			Expect(GetFirstMemberReference(newList, trans)).To(BeNil())
			Expect(GetLastMemberReference(newList, trans)).To(BeNil())
			Expect(newMemberReference.GetOwningConcept(trans)).To(BeNil())
		})
	})
	Describe("GetFirstReferenceForMember should work correctly", func() {
		Specify("GetFirstReferenceForMember should find each set member", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AddListMemberBefore(newList, memberReferenceA, referenceB, trans)
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := AddListMemberBefore(newList, memberReferenceA, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(GetFirstReferenceForMember(newList, referenceA, trans)).Should(Equal(memberReferenceA))
			Expect(GetFirstReferenceForMember(newList, referenceB, trans)).Should(Equal(memberReferenceB))
			Expect(GetFirstReferenceForMember(newList, newReference, trans)).Should(Equal(newMemberReference))
		})
		Specify("GetFirstReferenceForMember should return nil if element is not in list", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			Expect(GetFirstReferenceForMember(newList, referenceA, trans)).Should(BeNil())
		})
	})
	Describe("IsListMember should work correctly", func() {
		Specify("IsListMember on an empty set should return false", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			Expect(IsListMember(newList, referenceA, trans)).To(BeFalse())
		})
		Specify("IsListMember should work on every member of the set", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			AddListMemberBefore(newList, memberReferenceA, referenceB, trans)
			newReference, _ := uOfD.NewReference(trans)
			AddListMemberBefore(newList, memberReferenceA, newReference, trans)
			Expect(IsListMember(newList, referenceA, trans)).To(BeTrue())
			Expect(IsListMember(newList, referenceB, trans)).To(BeTrue())
			Expect(IsListMember(newList, newReference, trans)).To(BeTrue())
		})
	})
	Describe("PrependListMember should work correctly", func() {
		Specify("Prepend with empty set should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := PrependListMember(newList, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			Expect(newMemberReference.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			// Check first member reference
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check last member reference
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
		})
		Specify("Prepend with existing solo member should work correctly", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			// Add referenceA
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := PrependListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			// Add newReference
			newReference, _ := uOfD.NewReference(trans)
			newMemberReference, err := PrependListMember(newList, newReference, trans)
			Expect(err).ShouldNot(HaveOccurred())
			Expect(newMemberReference).ToNot(BeNil())
			Expect(newMemberReference.GetReferencedConcept(trans)).To(Equal(newReference))
			// Check first member reference
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check last member reference
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			// Check priorMemberReference of newMemberReference
			priorMemberReference, err3 := GetPriorMemberReference(memberReferenceA, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).ToNot(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(newMemberReference.GetConceptID(trans)))
			// Check nextMemberReference of memberReferenceA
			nextMemberReference, err4 := GetNextMemberReference(newMemberReference, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference).ToNot(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
		})
	})
	Describe("RemoveListMember should work correctly", func() {
		Specify("RemoveListMember on empty list should return an error", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			Expect(RemoveListMember(newList, referenceA, trans)).ToNot(Succeed())
		})
		Specify("RemoveListMember on singleton list should result in the empty set", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			AppendListMember(newList, referenceA, trans)
			Expect(RemoveListMember(newList, referenceA, trans)).To(Succeed())
			typeReference := newList.GetFirstOwnedReferenceRefinedFromURI(CrlListTypeReferenceURI, trans)
			Expect(typeReference).ToNot(BeNil())
			Expect(typeReference.GetReferencedConceptID(trans)).To(Equal(coreReference.GetConceptID(trans)))
			Expect(GetFirstMemberReference(newList, trans)).To(BeNil())
			Expect(GetLastMemberReference(newList, trans)).To(BeNil())
			Expect(IsListMember(newList, referenceA, trans)).To(BeFalse())
		})
		Specify("RemoveListMember on first element of list should work", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AddListMemberAfter(newList, memberReferenceA, referenceB, trans)
			referenceC, _ := uOfD.NewReference(trans)
			memberReferenceC, _ := AddListMemberAfter(newList, memberReferenceB, referenceC, trans)
			Expect(RemoveListMember(newList, referenceA, trans)).To(Succeed())
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceC.GetConceptID(trans)))
			priorMemberReference, err3 := GetPriorMemberReference(memberReferenceB, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference).To(BeNil())
		})
		Specify("RemoveListMember on middle element of list should work", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AddListMemberAfter(newList, memberReferenceA, referenceB, trans)
			referenceC, _ := uOfD.NewReference(trans)
			memberReferenceC, _ := AddListMemberAfter(newList, memberReferenceB, referenceC, trans)
			Expect(RemoveListMember(newList, referenceB, trans)).To(Succeed())
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceC.GetConceptID(trans)))
			priorMemberReference, err3 := GetPriorMemberReference(memberReferenceC, trans)
			Expect(err3).To(BeNil())
			Expect(priorMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			nextMemberReference, err4 := GetNextMemberReference(memberReferenceA, trans)
			Expect(err4).To(BeNil())
			Expect(nextMemberReference.GetConceptID(trans)).To(Equal(memberReferenceC.GetConceptID(trans)))
		})
		Specify("RemoveListMember on last element of list should work", func() {
			coreReference := uOfD.GetReferenceWithURI(core.ReferenceURI)
			newList, _ := NewList(uOfD, coreReference, trans)
			referenceA, _ := uOfD.NewReference(trans)
			memberReferenceA, _ := AppendListMember(newList, referenceA, trans)
			Expect(memberReferenceA.IsRefinementOfURI(CrlListMemberReferenceURI, trans)).To(BeTrue())
			referenceB, _ := uOfD.NewReference(trans)
			memberReferenceB, _ := AddListMemberAfter(newList, memberReferenceA, referenceB, trans)
			referenceC, _ := uOfD.NewReference(trans)
			AddListMemberAfter(newList, memberReferenceB, referenceC, trans)
			Expect(RemoveListMember(newList, referenceC, trans)).To(Succeed())
			firstMemberReference, err1 := GetFirstMemberReference(newList, trans)
			Expect(err1).To(BeNil())
			Expect(firstMemberReference).ToNot(BeNil())
			Expect(firstMemberReference.GetConceptID(trans)).To(Equal(memberReferenceA.GetConceptID(trans)))
			lastMemberReference, err2 := GetLastMemberReference(newList, trans)
			Expect(err2).To(BeNil())
			Expect(lastMemberReference).ToNot(BeNil())
			Expect(lastMemberReference.GetConceptID(trans)).To(Equal(memberReferenceB.GetConceptID(trans)))
			nextMemberReference, err3 := GetNextMemberReference(memberReferenceB, trans)
			Expect(err3).To(BeNil())
			Expect(nextMemberReference).To(BeNil())
		})
	})
	Describe("Serialization tests", func() {
		Specify("Instantiated lists should serialize and de-serialze properly", func() {
			uOfD2 := core.NewUniverseOfDiscourse()
			hl2 := uOfD.NewTransaction()
			defer hl2.ReleaseLocks()
			BuildCrlDataStructuresDomain(uOfD2, trans)
			type1 := uOfD.GetElementWithURI(core.ElementURI)
			domain1, _ := uOfD.NewElement(trans)
			list1, err0 := NewList(uOfD, type1, trans)
			list1.SetOwningConcept(domain1, trans)
			Expect(err0).To(BeNil())
			Expect(list1).ToNot(BeNil())
			serialized1, err := uOfD.MarshalDomain(domain1, trans)
			Expect(err).To(BeNil())
			domain2, err2 := uOfD2.RecoverDomain(serialized1, hl2)
			Expect(err2).To(BeNil())
			Expect(domain2).ToNot(BeNil())
			Expect(core.RecursivelyEquivalent(domain1, trans, domain2, hl2)).To(BeTrue())
			list2 := uOfD2.GetElement(list1.GetConceptID(trans))
			Expect(list2).ToNot(BeNil())
			list1FirstElementRefRef, err3 := getListReferenceToFirstMemberReference(list1, trans)
			Expect(err3).To(BeNil())
			Expect(list1FirstElementRefRef).ToNot(BeNil())
			list1FirstElementRef, err5 := GetFirstMemberReference(list1, trans)
			Expect(err5).To(BeNil())
			Expect(list1FirstElementRef).To(BeNil())
			list2FirstElementRefRef, err4 := getListReferenceToFirstMemberReference(list2, hl2)
			Expect(err4).To(BeNil())
			Expect(list2FirstElementRefRef).ToNot(BeNil())
			list2FirstElementRef, err6 := GetFirstMemberReference(list2, hl2)
			Expect(err6).To(BeNil())
			Expect(list2FirstElementRef).To(BeNil())
		})
	})
})
