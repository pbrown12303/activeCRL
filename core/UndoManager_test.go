package core

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("UndoManager internals test", func() {
	var uOfD UniverseOfDiscourse
	var hl *HeldLocks

	BeforeEach(func() {
		uOfD = NewUniverseOfDiscourse()
		hl = uOfD.NewHeldLocks()
	})

	AfterEach(func() {
		hl.ReleaseLocksAndWait()
	})

	Describe("Test undo redo on empty stack", func() {
		Specify("Turn undo recording on and off should work", func() {
			uOfD.SetRecordingUndo(true)
			Expect(uOfD.IsRecordingUndo()).To(BeTrue())
			uOfD.SetRecordingUndo(false)
			Expect(uOfD.IsRecordingUndo()).To(BeFalse())
		})
		Specify("Performing undo and redo on empty stack should not break anything", func() {
			uOfD.SetRecordingUndo(true)
			Expect(uOfD.IsRecordingUndo()).To(BeTrue())
			uOfD.Undo(hl)
			uOfD.Redo(hl)
			uOfD.SetRecordingUndo(false)
			Expect(uOfD.IsRecordingUndo()).To(BeFalse())
		})
	})

	Describe("Test Creation Undo and Redo", func() {
		Specify("Undo of Element creation should work", func() {
			uOfD.SetRecordingUndo(true)
			el, _ := uOfD.NewElement(hl)
			Expect(uOfD.GetElement(el.getConceptIDNoLock())).To(Equal(el))
			uOfD.Undo(hl)
			Expect(uOfD.GetElement(el.getConceptIDNoLock())).To(BeNil())
			uOfD.Redo(hl)
			Expect(uOfD.GetElement(el.getConceptIDNoLock())).To(Equal(el))
		})
		Specify("Undo of Literal creation should work", func() {
			uOfD.SetRecordingUndo(true)
			lit, _ := uOfD.NewLiteral(hl)
			Expect(uOfD.GetElement(lit.getConceptIDNoLock())).To(Equal(lit))
			uOfD.Undo(hl)
			Expect(uOfD.GetElement(lit.getConceptIDNoLock())).To(BeNil())
			uOfD.Redo(hl)
			Expect(uOfD.GetElement(lit.getConceptIDNoLock())).To(Equal(lit))
		})
		Specify("Undo of Reference creation should work", func() {
			uOfD.SetRecordingUndo(true)
			ref, _ := uOfD.NewReference(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(Equal(ref))
			uOfD.Undo(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(BeNil())
			uOfD.Redo(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(Equal(ref))
		})
		Specify("Undo of Refinement creation should work", func() {
			uOfD.SetRecordingUndo(true)
			ref, _ := uOfD.NewRefinement(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(Equal(ref))
			uOfD.Undo(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(BeNil())
			uOfD.Redo(hl)
			Expect(uOfD.GetElement(ref.getConceptIDNoLock())).To(Equal(ref))
		})
	})

	Describe("Test Undo of setting non-pointer values", func() {
		Specify("Undo of SetDefinition should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			value := "Test"
			el.SetDefinition(value, hl)
			Expect(el.GetDefinition(hl)).To(Equal(value))
			uOfD.Undo(hl)
			Expect(el.GetDefinition(hl)).To(Equal(""))
			uOfD.Redo(hl)
			Expect(el.GetDefinition(hl)).To(Equal(value))
		})
		Specify("Undo of SetLabel should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			value := "Test"
			el.SetLabel(value, hl)
			Expect(el.GetLabel(hl)).To(Equal(value))
			uOfD.Undo(hl)
			Expect(el.GetLabel(hl)).To(Equal(""))
			uOfD.Redo(hl)
			Expect(el.GetLabel(hl)).To(Equal(value))
		})
		Specify("Undo of setIsCore should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			el.SetIsCore(hl)
			Expect(el.GetIsCore(hl)).To(BeTrue())
			uOfD.Undo(hl)
			Expect(el.GetIsCore(hl)).To(BeFalse())
			uOfD.Redo(hl)
			Expect(el.GetIsCore(hl)).To(BeTrue())
		})
		Specify("Undo of SetReadOnly should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			el.SetReadOnly(true, hl)
			Expect(el.IsReadOnly(hl)).To(BeTrue())
			uOfD.Undo(hl)
			Expect(el.IsReadOnly(hl)).To(BeFalse())
			uOfD.Redo(hl)
			Expect(el.IsReadOnly(hl)).To(BeTrue())
		})
		Specify("Undo of incrementVersion should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			initialVersion := el.GetVersion(hl)
			el.incrementVersion(hl)
			Expect(el.GetVersion(hl)).To(Equal(initialVersion + 1))
			uOfD.Undo(hl)
			Expect(el.GetVersion(hl)).To(Equal(initialVersion))
			uOfD.Redo(hl)
			Expect(el.GetVersion(hl)).To(Equal(initialVersion + 1))
		})
		Specify("Undo of SetURI should work", func() {
			el, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			uri := "http://test.uri"
			el.SetURI(uri, hl)
			Expect(el.GetURI(hl)).To(Equal(uri))
			uOfD.Undo(hl)
			Expect(el.GetURI(hl)).To(Equal(""))
			uOfD.Redo(hl)
			Expect(el.GetURI(hl)).To(Equal(uri))
		})
		Specify("Undo of SetLiteralValue should work", func() {
			lit, _ := uOfD.NewLiteral(hl)
			uOfD.SetRecordingUndo(true)
			value := "Literal Value"
			lit.SetLiteralValue(value, hl)
			Expect(lit.GetLiteralValue(hl)).To(Equal(value))
			uOfD.Undo(hl)
			Expect(lit.GetLiteralValue(hl)).To(Equal(""))
			uOfD.Redo(hl)
			Expect(lit.GetLiteralValue(hl)).To(Equal(value))
		})
	})

	Describe("Test undo of setting pointer-related values", func() {
		Specify("Undo of SetOwningConceptID should work", func() {
			el, _ := uOfD.NewElement(hl)
			owner, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			el.SetOwningConceptID(owner.getConceptIDNoLock(), hl)
			Expect(el.GetOwningConceptID(hl)).To(Equal(owner.getConceptIDNoLock()))
			Expect(el.GetOwningConcept(hl)).To(Equal(owner))
			Expect((owner.GetOwnedConcepts(hl))[el.getConceptIDNoLock()]).To(Equal(el))
			uOfD.Undo(hl)
			Expect(el.GetOwningConceptID(hl)).To(Equal(""))
			Expect(el.GetOwningConcept(hl)).To(BeNil())
			Expect((owner.GetOwnedConcepts(hl))[el.getConceptIDNoLock()]).To(BeNil())
			uOfD.Redo(hl)
			Expect(el.GetOwningConceptID(hl)).To(Equal(owner.getConceptIDNoLock()))
			Expect(el.GetOwningConcept(hl)).To(Equal(owner))
			Expect((owner.GetOwnedConcepts(hl))[el.getConceptIDNoLock()]).To(Equal(el))
		})
		Specify("Undo of SetReferencedConceptID should work", func() {
			ref, _ := uOfD.NewReference(hl)
			target, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			ref.SetReferencedConceptID(target.getConceptIDNoLock(), hl)
			Expect(ref.GetReferencedConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetReferencedConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
			uOfD.Undo(hl)
			Expect(ref.GetReferencedConceptID(hl)).To(Equal(""))
			Expect(ref.GetReferencedConcept(hl)).To(BeNil())
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(BeNil())
			uOfD.Redo(hl)
			Expect(ref.GetReferencedConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetReferencedConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
		})
		Specify("Undo of SetAbstractConceptID should work", func() {
			ref, _ := uOfD.NewRefinement(hl)
			target, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			ref.SetAbstractConceptID(target.getConceptIDNoLock(), hl)
			Expect(ref.GetAbstractConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetAbstractConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
			uOfD.Undo(hl)
			Expect(ref.GetAbstractConceptID(hl)).To(Equal(""))
			Expect(ref.GetAbstractConcept(hl)).To(BeNil())
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(BeNil())
			uOfD.Redo(hl)
			Expect(ref.GetAbstractConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetAbstractConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
		})
		Specify("Undo of SetRefinedConceptID should work", func() {
			ref, _ := uOfD.NewRefinement(hl)
			target, _ := uOfD.NewElement(hl)
			uOfD.SetRecordingUndo(true)
			ref.SetRefinedConceptID(target.getConceptIDNoLock(), hl)
			Expect(ref.GetRefinedConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetRefinedConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
			uOfD.Undo(hl)
			Expect(ref.GetRefinedConceptID(hl)).To(Equal(""))
			Expect(ref.GetRefinedConcept(hl)).To(BeNil())
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(BeNil())
			uOfD.Redo(hl)
			Expect(ref.GetRefinedConceptID(hl)).To(Equal(target.getConceptIDNoLock()))
			Expect(ref.GetRefinedConcept(hl)).To(Equal(target))
			Expect((target.(*element).listeners.CopyMap())[ref.getConceptIDNoLock()]).To(Equal(ref))
		})
	})
})
